#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define N 4

int finalCost = INT_MAX;
int finalAssignment[N];

int findMin(int cost[N][N], int row, int excludedCol) {
    int min = INT_MAX;
    for (int i = 0; i < N; i++) {
        if (i != excludedCol && cost[row][i] < min) {
            min = cost[row][i];
        }
    }
    return min;
}

int calculateLowerBound(int cost[N][N], bool assigned[N]) {
    int lowerBound = 0;
    
    for (int i = 0; i < N; i++) {
        if (!assigned[i]) {
            lowerBound += findMin(cost, i, -1);
        }
    }
    return lowerBound;
}

void solveAssignment(int cost[N][N], int currCost, int agent, bool assigned[N], int assignment[N]) {
    if (agent == N) {
        if (currCost < finalCost) {
            finalCost = currCost;
            for (int i = 0; i < N; i++) {
                finalAssignment[i] = assignment[i];
            }
        }
        return;
    }

    for (int task = 0; task < N; task++) {
        if (!assigned[task]) {
            assigned[task] = true;
            assignment[agent] = task;

            int tempCost = currCost + cost[agent][task];

            if (tempCost + calculateLowerBound(cost, assigned) < finalCost) {
                solveAssignment(cost, tempCost, agent + 1, assigned, assignment);
            }

            assigned[task] = false;
        }
    }
}

int main() {
    int cost[N][N] = {
        {9, 2, 7, 8},
        {6, 4, 3, 7},
        {5, 8, 1, 8},
        {7, 6, 9, 4}
    };

    bool assigned[N] = {false};
    int assignment[N];

    solveAssignment(cost, 0, 0, assigned, assignment);

    printf("The minimum cost is: %d\n", finalCost);
    printf("The optimal assignment is:\n");
    for (int i = 0; i < N; i++) {
        printf("Agent %d is assigned to Task %d\n", i, finalAssignment[i]);
    }

    return 0;
}
